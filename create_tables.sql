-- Active: 1698951587226@@127.0.0.1@3306@assignment2
CREATE TABLE `customers`(
    `customer_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `name` varchar(50) NOT NULL,
    `email` varchar(50) NOT NULL,
    `location` varchar(100) NOT NULL
)

INSERT INTO `customers` (`name`, `email`, `location`) VALUES
('a', 'email1@email.com', 'location1'),
('b', 'email2@email.com', 'location2'),
('c', 'email3@email.com', 'location3'),
('d', 'email4@email.com', 'location4'),
('e', 'email5@email.com', 'location5'),
('f', 'email6@email.com', 'location6'),
('g', 'email7@email.com', 'location7'),
('h', 'email8@email.com', 'location8'),
('i', 'email9@email.com', 'location9'),
('j', 'email10@email.com', 'location10')

CREATE TABLE `orders`(
    `order_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `customer_id` bigint(20) UNSIGNED NOT NULL,
    `orderDate` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
    `totalAmount` FLOAT(5,2) NOT NULL,
    FOREIGN KEY (`customer_id`) REFERENCES `customers`(`customer_id`) ON DELETE RESTRICT ON UPDATE CASCADE
)

INSERT INTO `orders` (`customer_id`, `totalAmount`) VALUES
(1, 100.10),
(3, 50.10),
(5, 220.00),
(6, 100.09),
(2, 110.10),
(1, 40.10),
(7, 12.10),
(10, 20.20),
(5, 30.10),
(2, 400.60)

CREATE TABLE `products`(
    `product_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `category_id` bigint(20) UNSIGNED NOT NULL,
    `name` varchar(50) NOT NULL,
    `description` varchar(255) NOT NULL,
    `price` FLOAT(5,2) NOT NULL,
    FOREIGN KEY (`category_id`) REFERENCES `categories`(`category_id`) ON DELETE RESTRICT ON UPDATE CASCADE
)

INSERT INTO `products` (`category_id`,`name`, `description`,`price`) VALUES
(1,'item1', 'this is the description of product item1', 21.15),
(1,'item2', 'this is the description of product item2', 13.68),
(1,'item3', 'this is the description of product item3', 12.10),
(3,'item4', 'this is the description of product item4', 68.10),
(3,'item5', 'this is the description of product item5', 19.10),
(3,'item6', 'this is the description of product item6', 11.99),
(2,'item7', 'this is the description of product item7', 24.10),
(1,'item8', 'this is the description of product item8', 36.20),
(2,'item9', 'this is the description of product item9', 70.02),
(3,'item10', 'this is the description of product item10', 25.12)

CREATE TABLE `categories`(
    `category_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `category_name` VARCHAR(20) NOT NULL
)

INSERT INTO `categories` (`category_name`) VALUES
('category1'),
('category2'),
('category3')


CREATE TABLE `Order_Items`(
    `orderitemID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `order_id` bigint(20) UNSIGNED NOT NULL,
    `product_id` bigint(20) UNSIGNED NOT NULL,
    `quantity` INT NOT NULL,
    `unit_price` FLOAT(5,2) NOT NULL,
    FOREIGN KEY (`order_id`) REFERENCES `orders`(`order_id`) ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (`product_id`) REFERENCES `products`(`product_id`) ON DELETE RESTRICT ON UPDATE CASCADE
)


INSERT INTO `Order_Items` (`order_id`,`product_id`,`quantity`, `unit_price`) VALUES
(1,1,10,10.10),
(1,2,2,11.10),
(1,2,6,60.10),
(3,1,3,30.15),
(3,5,8,100.20),
(6,8,6,12.70),
(6,9,5,109.11),
(8,10,9,10.23),
(9,6,10,50.10),
(9,1,15,120.10)


-- Task1:
/*
Write a SQL query to retrieve all the customer information along with the total number of orders placed by each customer. Display the result in descending order of the number of orders. 
 */
select orders.customer_id,count(*) as total_orders, customers.name, customers.email, customers.location from orders inner join customers on orders.customer_id = customers.customer_id group by orders.customer_id order by total_orders DESC;


/*
Task 2:
Write a SQL query to retrieve the product name, quantity, and total amount for each order item. Display the result in ascending order of the order ID. 
 */

select orders.order_id, products.name as product_name, sum(order_items.quantity) as quantity, sum(orders.totalAmount) as total_amount from products left join order_items on products.product_id = order_items.product_id left join orders on orders.order_id = order_items.order_id group by orders.order_id,products.name order by orders.order_id;

/*
Task 3:
Write a SQL query to retrieve the total revenue generated by each product category. Display the category name along with the total revenue in descending order of the revenue. 
 */

select categories.category_name, sum(products.price) as revenue from products left join categories on products.category_id = categories.category_id group by categories.category_name order by revenue desc;


/*
Task 4:
Write a SQL query to retrieve the top 5 customers who have made the highest total purchase amount. Display the customer name along with the total purchase amount in descending order of the purchase amount. 
 */

 select customers.name, orders.totalAmount from customers inner join orders on customers.customer_id = orders.customer_id order by orders.totalAmount desc limit 5;